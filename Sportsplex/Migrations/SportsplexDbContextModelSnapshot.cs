// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Sportsplex;

#nullable disable

namespace Sportsplex.Migrations
{
    [DbContext(typeof(SportsplexDbContext))]
    partial class SportsplexDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BookingUser", b =>
                {
                    b.Property<int>("BookerId")
                        .HasColumnType("integer");

                    b.Property<int>("VenueBookerId")
                        .HasColumnType("integer");

                    b.HasKey("BookerId", "VenueBookerId");

                    b.HasIndex("VenueBookerId");

                    b.ToTable("UserBooking", (string)null);
                });

            modelBuilder.Entity("Sportsplex.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<int>("LocationId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ReservedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Rsvps")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LocationId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Looking for a well-maintained baseball field for your team’s practice, friendly matches, or community events? Our well-maintained baseball field is just the right size for youth teams, recreational leagues, or small group games.",
                            Image = "https://mainstreetmediatn.com/wp-content/uploads/images/2020-08-03/dd4fab6c064324561e49e8a44eaa6afc.jpg",
                            LocationId = 1,
                            Name = "Drakes Creek Park, Baseball Field 1",
                            OwnerId = 1,
                            ReservedDate = new DateTime(2024, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Rsvps = 120
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            Description = "Need a soccer field for your team’s practice sessions, friendly matches, or local events? Our soccer field is ideal for youth teams, recreational leagues, or casual play with friends.",
                            Image = "https://themotzgroup.com/wp-content/webpc-passthru.php?src=https://themotzgroup.com/wp-content/uploads/2022/08/Russell-Creek-Park-Complete-5.2-7.jpg&nocache=1",
                            LocationId = 1,
                            Name = "Drakes Creek Park, Soccer Field 1",
                            OwnerId = 1,
                            ReservedDate = new DateTime(2024, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Rsvps = 120
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            Description = "Make a splash with our pool rental! Whether you're planning a private party, hosting swim lessons, or just looking for a refreshing way to spend the day, our clean and well-maintained pool is ready for you.",
                            Image = "https://swimswam.com/wp-content/uploads/2017/05/Stock-RCC-pool-4.jpg",
                            LocationId = 3,
                            Name = "Nashville Pool, Pool 1",
                            OwnerId = 1,
                            ReservedDate = new DateTime(2024, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Rsvps = 120
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            Description = "Get your team together and hit the gridiron with our football field rental. Whether it’s practice, a scrimmage, or a community event, our well-kept field is ready for action.",
                            Image = "https://www.sunshineofficials.com/wp-content/uploads/2017/06/youth-field.jpg",
                            LocationId = 3,
                            Name = "Gallatin Football Complex",
                            OwnerId = 2,
                            ReservedDate = new DateTime(2024, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Rsvps = 120
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 5,
                            Description = "Our basketball court rental is perfect for players of all skill levels. Whether you're running drills, organizing a pickup game, or hosting a small tournament, this court provides a professional and comfortable space for play.",
                            Image = "https://d2rzw8waxoxhv2.cloudfront.net/facilities/large/1ce7836979045d923802/1650980224494-333-243.jpeg",
                            LocationId = 4,
                            Name = "Portland Park, Basketball Court 1",
                            OwnerId = 2,
                            ReservedDate = new DateTime(2024, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Rsvps = 120
                        });
                });

            modelBuilder.Entity("Sportsplex.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Baseball"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Soccer"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Swimming"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Football"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Basketball"
                        });
                });

            modelBuilder.Entity("Sportsplex.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<int>("BookingId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            BookingId = 1,
                            Content = "I love Baseball"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 1,
                            BookingId = 2,
                            Content = "I love Soccer"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 2,
                            BookingId = 3,
                            Content = "I love Swimming"
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 3,
                            BookingId = 4,
                            Content = "I love Football"
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 2,
                            BookingId = 5,
                            Content = "I love Basketball"
                        });
                });

            modelBuilder.Entity("Sportsplex.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Hendersonville"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Gallatin"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Nashville"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Portland"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Murfreesboro"
                        });
                });

            modelBuilder.Entity("Sportsplex.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "noahcurryallenpa@gmail.com",
                            Image = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSpYf1NgPAHFUAUb_EeeJ6ZS-l_VxhwiPD_1A&s",
                            Uid = "fgikJy5FMVXz3M8t5DkBSzUp64i2",
                            UserName = "Noah"
                        },
                        new
                        {
                            Id = 2,
                            Email = "deramust@gmail.com",
                            Image = "https://store.nana.co/_next/image?url=https%3A%2F%2Fcdn.nana.sa%2Fcatalog%2Flarge%2F8%2F3%2F5%2Fd%2F835d1df68bafe50d5c93e5354af0a33785bc7cac_8697439302229.jpg&w=1200&q=75",
                            Uid = "MJ1mbp0Gm1dnXYqECtMh3PH5dHy2",
                            UserName = "Toren"
                        },
                        new
                        {
                            Id = 3,
                            Email = "Mrthincrisp@example.com",
                            Image = "https://m.media-amazon.com/images/I/814UidWgKOL.jpg",
                            Uid = "ghi789",
                            UserName = "CoolGuyDerek"
                        });
                });

            modelBuilder.Entity("BookingUser", b =>
                {
                    b.HasOne("Sportsplex.Models.User", null)
                        .WithMany()
                        .HasForeignKey("BookerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sportsplex.Models.Booking", null)
                        .WithMany()
                        .HasForeignKey("VenueBookerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sportsplex.Models.Booking", b =>
                {
                    b.HasOne("Sportsplex.Models.Category", "Category")
                        .WithMany("Booking")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sportsplex.Models.Location", "Location")
                        .WithMany("Booking")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sportsplex.Models.User", "Owner")
                        .WithMany("VenueOwner")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Location");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Sportsplex.Models.Comment", b =>
                {
                    b.HasOne("Sportsplex.Models.Booking", "Booking")
                        .WithMany("Comments")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sportsplex.Models.User", "User")
                        .WithMany("Comment")
                        .HasForeignKey("UserId");

                    b.Navigation("Booking");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sportsplex.Models.Booking", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Sportsplex.Models.Category", b =>
                {
                    b.Navigation("Booking");
                });

            modelBuilder.Entity("Sportsplex.Models.Location", b =>
                {
                    b.Navigation("Booking");
                });

            modelBuilder.Entity("Sportsplex.Models.User", b =>
                {
                    b.Navigation("Comment");

                    b.Navigation("VenueOwner");
                });
#pragma warning restore 612, 618
        }
    }
}
